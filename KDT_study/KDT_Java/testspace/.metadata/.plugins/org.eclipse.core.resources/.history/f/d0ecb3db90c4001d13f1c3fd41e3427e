package com.jjy.test;

class Car {
	String name;
	String color;
	boolean gasoline;

	Car(String name, String color, boolean gasoline) {
		this.name = name;
		this.color = color;
		this.gasoline = gasoline;
	}

	void run() {
		if (gasoline) {
			System.out.println("부릉 부릉");
		} else {
			System.out.println("덜컹 덜컹");
		}
	}

	void stop() {
		System.out.println("끼이익");
	}
}

class Truck extends Car { // 서브 클래스 형식 : "class 서브클래스명 extends 슈퍼클래스명"

	int Ton; // 서브 클래스에서 추가 정의한 필드.

	Truck(String name, String color, boolean gasoline, int ton) {
		super(name, color, gasoline);
		this.Ton = ton;
	}
	
//	슈퍼클래스의 상속멤버는 직접 초기화가 불가능함 -> super키워드를 통해 슈퍼의 생성자를 호출하여 초기화를 위임.
//	생성자간 호출 시의 this생성자 호출문과 사용 형식이 동일하여 서브의 필드 초기식 보다 super후출문이 선 정의되어야함.
//	슈퍼에 생성자가 있다면 반드시 super키워드를 통해 초기화해야 하나, 슈퍼에 생성자가 없다면 super를 호출 안해도 무방하며,
//  슈퍼에 생성자가 없는 경우에는 슈퍼의 디폴트 생성자가 자동 호출됨.

	void run() {
		System.out.println("우당탕 쿵쾅");
		super.run();							// 서브에서 재정의로 가려진 슈퍼의 메서드를 호출 시에는 "super.메서드"
	}											// 단, super생성자 호출문에서와 같이 선두에 와야 할 강제성은 없음.
	
	void convey() {								// 서브 클래스에서 추가 정의한 메서드.	
		System.out.println("짐을 실어 나른다.");
	}
	
}

public class Main {
	public static void main(String[] args) {
		Truck poter = new Truck("포터","흰색",false,1000);	  	// 서브 객체 생성.	
		
		poter.run();	 	//	서브 객체에 재정의한 메서드 호출.	
		poter.convey();										// 서브 객체에 추가 정의한 메서드 호출.	
	}
}